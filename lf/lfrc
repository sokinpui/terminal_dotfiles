# interpreter for shell commands
set shell zsh

set icons
set incsearch
set incfilter
set drawbox


# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already

# Dynamically set number of columns
cmd on-redraw %{{
    if [ "$lf_width" -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ "$lf_width" -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set filesep "\n"  # default already

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
#set cursorpreviewfmt "\033[7;90m"

# preview with kitty
set previewer '~/.config/lf/scope'
set cleaner '~/.config/lf/cleaner'

# startup command
# "latest modified first"
set sortby time
set reverse
map sr set reverse!

# dialbe keymaps
# map w
map i

# use enter for shell commands
#map <enter> shell
map <enter> open

# show the result of execution of previous commands
# map <c-z> !true

# execute current file (must be executable)
#map x $$f
map X !$f

cmd make-file-exectable %{{
    [[ -x $fx ]] && chmod -x $fx || chmod +x $fx
    lf -remote "send $id reload"
}}

map x make-file-exectable

# dedicated keys for file opener actions
#map o &mimeopen $f
#map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        *) lf -remote "send $id \$$EDITOR \$fx";;
        # inode/x-empty) lf -remote "send $id \$$EDITOR \$fx";;
        # *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# create directory and file
map O :push %mkdir<space>-p<space>
map o :push %touch<space>


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

cmd trash ${{
    $HOME/.local/bin/trash-put $fx
}}

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# save clear yank, delete files

# zoxide integration
cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

# accept input from the user
map <c-z> push :z<space>

# git integration
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}

# fzf integration
cmd fzf_jump ${{
    res="$(fd --type=directory | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map <c-g> :fzf_jump

cmd fzf_jump_to ${{
    res="$(fd --type=file | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id select \"$res\""
    fi
}}
map <c-f> :fzf_jump_to

# bulk-rename with editor
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map R
map R bulk-rename

# unmap the default rename keybinding
map I :rename; cmd-home
map A :rename; cmd-end
map S :rename; cmd-end; cmd-delete-home

# repeat last command
map . :read; cmd-history-prev; cmd-enter

cmd hugo-create-new-blog ${{
    new_blog="$PWD/$1"
    cd "$HUGO_BLOG_DIR"
    hugo new "$new_blog/index.md"
    cd -
    $EDITOR "$new_blog/index.md"
    lf -remote "send $id reload"
}}

cmd goto-hugo-blog ${{
    lf -remote "send $id cd '$HUGO_BLOG_DIR'"
}}

map gb :goto-hugo-blog

map g. set hidden!
map <backspace> set hidden!

# warp navigation
# map j !/Users/mac/repo/dotfiles/Mac/lf/wrap_nav.sh down
# map k !/Users/mac/repo/dotfiles/Mac/lf/wrap_nav.sh up

# move parent directory
cmd move-parent &{{
    dironly="setlocal \"$(dirname -- "$PWD" | sed 's/\\/\\\\/g;s/"/\\"/g')\" dironly"
    lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}

map J move-parent down
map K move-parent up

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                line="$(printf '%s' "$line" | sed 's/\\/\\\\/g;s/"/\\"/g')"
                lf -remote "send $id echo \"$line\""
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

map <esc> quit

cmd q :{{
    quit
}}

# refresh rate
set period 1

# trash restore
cmd rs ${{
  trash-restore
}}

# create new file and edit in editor
cmd vim ${{
# read input
  touch $@
  $EDITOR $@
}}
map e push :vim<space>

cmd rg ${{
    rg $@ | less
}}

cmd fd ${{
    fd $@ | less
}}


