#!/bin/bash

# --- Configuration ---
REMOTE_HOST="mac"
POLL_INTERVAL=0.5
# A unique path for the SSH control socket
CONTROL_PATH="/tmp/ssh_mux_$(whoami)_${REMOTE_HOST}"
# ---------------------

# --- Color Codes ---
NC='\033[0m' # No Color
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
GRAY='\033[1;30m'

# --- Pre-flight Checks ---
for cmd in pngpaste osascript scp shasum; do
  if ! command -v "$cmd" &>/dev/null; then
    echo -e "${RED}[ERROR] Required command '$cmd' not found. Aborting.${NC}"
    exit 1
  fi
done

# --- PID of the autossh process ---
AUTOSSH_PID=""

echo -e "${YELLOW}[INFO] Starting bidirectional clipboard sync with '$REMOTE_HOST'${NC}"

# --- Cleanup function to run on exit ---
cleanup() {
  # Disable further signals to prevent re-entry
  trap '' SIGINT EXIT

  echo -e "\n${YELLOW}[INFO] Stopping SSH connection and cleaning up...${NC}"

  # Kill the autossh process if it's running
  if [ -n "$AUTOSSH_PID" ]; then
    kill "$AUTOSSH_PID" 2>/dev/null
  fi

  # Close the master SSH connection if the socket exists
  if [ -S "$CONTROL_PATH" ]; then
    ssh -S "$CONTROL_PATH" -O exit "$REMOTE_HOST" 2>/dev/null
  fi

  echo -e "${YELLOW}[INFO] Stopped.${NC}"
  # Explicitly exit the script to ensure termination
  exit 0
}

# Trap Ctrl+C (SIGINT) and script termination (EXIT) to run the cleanup function
trap cleanup SIGINT EXIT

# --- Start a persistent SSH connection in the background ---
echo -e "${GRAY}[DEBUG] Starting persistent SSH connection with autossh...${NC}"
# Use AUTOSSH_GATETIME=0 to prevent autossh from creating an initial connection test window,
# which can interfere with scripting. Let our own test handle it.
AUTOSSH_GATETIME=0 autossh -M 0 -f -N \
  -o "ServerAliveInterval 60" \
  -o "ServerAliveCountMax 3" \
  -o "ControlMaster auto" \
  -o "ControlPath=$CONTROL_PATH" \
  -o "ExitOnForwardFailure=yes" \
  "$REMOTE_HOST"

# Store the PID of the last background process (autossh)
AUTOSSH_PID=$!

# Give it a moment to establish the connection
sleep 2

# --- SSH options for subsequent commands to use the master connection ---
SSH_OPTS="-o ControlPath=$CONTROL_PATH"

# --- Initial Connection Test ---
echo -e "${GRAY}[DEBUG] Testing SSH connection via master...${NC}"
# Use a timeout for the check
if ! ssh $SSH_OPTS -o ConnectTimeout=5 "$REMOTE_HOST" 'true' 2>/dev/null; then
  echo -e "${RED}[ERROR] Could not establish a persistent connection to '$REMOTE_HOST'. Aborting.${NC}"
  # The EXIT trap will handle cleanup
  exit 1
fi

echo -e "${GRAY}[DEBUG] Initial connection successful.${NC}"

# --- Command Definitions ---
# The key fix: Export a UTF-8 locale on the remote end for every command.
# This ensures that multi-byte characters are handled correctly by the remote shell and tools.
BASE64_DECODE="base64 -d"
REMOTE_PASTE_CMD="export LANG=en_US.UTF-8; pbpaste | base64"
REMOTE_COPY_CMD="export LANG=en_US.UTF-8; ${BASE64_DECODE} | pbcopy"

# --- Image Sync Helper ---
_is_image_in_clipboard() {
  # Use clipboard info to check for common image types.
  osascript -e 'clipboard info' 2>/dev/null | grep -qE '«class PNGf»|«class TIFF»|«class JPEG»'
}

# --- Get Initial State (using Base64 for safe transport) ---
LAST_LOCAL_CONTENT_B64=$(pbpaste | base64)
LAST_REMOTE_CONTENT_B64=$(ssh $SSH_OPTS "$REMOTE_HOST" "$REMOTE_PASTE_CMD" 2>/dev/null)
LAST_LOCAL_HASH=""
LAST_REMOTE_HASH=""

echo -e "${YELLOW}[STATE] Initial local content (encoded) length: ${#LAST_LOCAL_CONTENT_B64}${NC}"
echo -e "${YELLOW}[STATE] Initial remote content (encoded) length: ${#LAST_REMOTE_CONTENT_B64}${NC}"
echo -e "${YELLOW}[INFO] Press Ctrl+C to stop.${NC}"

# --- Main Sync Loop ---
while true; do
  # 1. Check for local changes (priority to local)

  # A. Check for image content
  if _is_image_in_clipboard; then
    local_temp_file=$(mktemp "/tmp/sync-clip-local.XXXXXX")
    if pngpaste "$local_temp_file" &>/dev/null; then
      current_local_hash=$(shasum -a 256 "$local_temp_file" | awk '{print $1}')
      if [[ "$current_local_hash" != "$LAST_LOCAL_HASH" ]]; then
        echo -e "${GREEN}[SYNC] $(date) Syncing Local Image -> Remote.${NC}"
        remote_temp_file="/tmp/$(basename "$local_temp_file")"
        scp -q $SSH_OPTS "$local_temp_file" "$REMOTE_HOST:$remote_temp_file"
        remote_cmd="osascript -e 'set the clipboard to (read (POSIX file \"$remote_temp_file\") as TIFF picture)' &>/dev/null && rm '$remote_temp_file'"
        ssh $SSH_OPTS "$REMOTE_HOST" "$remote_cmd"

        LAST_LOCAL_HASH="$current_local_hash"
        LAST_REMOTE_HASH="$current_local_hash"
        LAST_LOCAL_CONTENT_B64=""
        LAST_REMOTE_CONTENT_B64=""
        sleep $POLL_INTERVAL
        continue
      fi
      rm "$local_temp_file"
    fi
  fi

  # B. Check for text content
  CURRENT_LOCAL_CONTENT_B64=$(pbpaste | base64)
  if [[ "$CURRENT_LOCAL_CONTENT_B64" != "$LAST_LOCAL_CONTENT_B64" ]]; then
    echo -e "${GREEN}[SYNC] $(date) Syncing Local Text -> Remote.${NC}"
    printf "%s" "$CURRENT_LOCAL_CONTENT_B64" | ssh $SSH_OPTS "$REMOTE_HOST" "$REMOTE_COPY_CMD"
    LAST_LOCAL_CONTENT_B64="$CURRENT_LOCAL_CONTENT_B64"
    LAST_REMOTE_CONTENT_B64="$CURRENT_LOCAL_CONTENT_B64"
    LAST_LOCAL_HASH=""
    LAST_REMOTE_HASH=""
    sleep $POLL_INTERVAL
    continue
  fi

  # 2. Check for remote changes

  # A. Check for remote image content
  REMOTE_CHECK_IMAGE_CMD="osascript -e 'clipboard info' 2>/dev/null | grep -qE '«class PNGf»|«class TIFF»|«class JPEG»'"
  if ssh $SSH_OPTS "$REMOTE_HOST" "$REMOTE_CHECK_IMAGE_CMD"; then
    remote_temp_file=$(ssh $SSH_OPTS "$REMOTE_HOST" "mktemp '/tmp/sync-clip-remote.XXXXXX'")
    if ssh $SSH_OPTS "$REMOTE_HOST" "pngpaste '$remote_temp_file' &>/dev/null"; then
      current_remote_hash=$(ssh $SSH_OPTS "$REMOTE_HOST" "shasum -a 256 '$remote_temp_file' | awk '{print \$1}'")
      if [[ "$current_remote_hash" != "$LAST_REMOTE_HASH" ]]; then
        echo -e "${BLUE}[SYNC] $(date) Syncing Remote Image -> Local.${NC}"
        local_temp_file=$(mktemp "/tmp/sync-clip-local.XXXXXX")
        scp -q $SSH_OPTS "$REMOTE_HOST:$remote_temp_file" "$local_temp_file"
        osascript -e "set the clipboard to (read (POSIX file \"$local_temp_file\") as TIFF picture)" &>/dev/null
        rm "$local_temp_file"
        LAST_REMOTE_HASH="$current_remote_hash"
        LAST_LOCAL_HASH="$current_remote_hash"
        LAST_LOCAL_CONTENT_B64=""
        LAST_REMOTE_CONTENT_B64=""
        sleep $POLL_INTERVAL
        continue
      fi
      ssh $SSH_OPTS "$REMOTE_HOST" "rm '$remote_temp_file'"
    fi
  fi

  # B. Check for remote text content
  CURRENT_REMOTE_CONTENT_B64=$(ssh $SSH_OPTS "$REMOTE_HOST" "$REMOTE_PASTE_CMD" 2>/dev/null)
  if [ $? -ne 0 ]; then
    echo -e "${YELLOW}[WARN] Remote connection lost. Autossh should be attempting to reconnect.${NC}"
    sleep 5
    continue
  fi

  if [[ "$CURRENT_REMOTE_CONTENT_B64" != "$LAST_REMOTE_CONTENT_B64" ]]; then
    echo -e "${BLUE}[SYNC] $(date) Syncing Remote Text -> Local.${NC}"
    printf "%s" "$CURRENT_REMOTE_CONTENT_B64" | ${BASE64_DECODE} | pbcopy
    LAST_REMOTE_CONTENT_B64="$CURRENT_REMOTE_CONTENT_B64"
    LAST_LOCAL_CONTENT_B64="$CURRENT_REMOTE_CONTENT_B64"
    LAST_LOCAL_HASH=""
    LAST_REMOTE_HASH=""
  fi

  sleep $POLL_INTERVAL
done
