# vim: set ft=tmux:
# ~/.config/tmux/appearance.conf
# Appearance settings: terminal, colors, status bar (Doom One inspired)

# -----------------------------------------------------------------------------
# Terminal Capability Settings
# -----------------------------------------------------------------------------
# Set the default terminal type for programs running inside tmux.
set-option -g default-terminal "tmux-256color"

# Enable True Color support by telling tmux the enclosing terminal supports it.
# -g = global, -a = append, -s = server-wide
set-option -ga terminal-overrides ",xterm-256color:Tc"

# -----------------------------------------------------------------------------
# Status Bar
# -----------------------------------------------------------------------------
set-option -g status on
set-option -g status-interval 1
set-option -g status-position bottom
set-option -g status-keys vi

# Overall status bar style (Doom One theme)
set-option -g status-style "fg=#abb2bf,bg=#282c34"

# --- Status Bar Left ---
# Session name: e.g., "[config]" in bright cyan
set-option -g status-left-length 40
set-option -g status-left "#[fg=color51,bg=#282c34,bold] [#S] #[none]" # Use #S for session name

SESSION_NAME_FG="colour51" # Or use: "fg=#56b6c2"
# --- Status Bar Right ---
# Keep it minimal or add content like time, date, etc.
# Example: "%Y-%m-%d %H:%M" for date and time
set-option -g status-right-length 40
set-option -g status-right ""

# -----------------------------------------------------------------------------
# Window List
# -----------------------------------------------------------------------------
# Place window list immediately after status-left
set-option -g status-justify left

# Active window: Light green background, dark text
set-window-option -g window-status-current-style "fg=#282c34,bg=#98c379,bold"
set-window-option -g window-status-current-format " #I:#W#F "

# Inactive windows: Dim grey text on the main background
set-window-option -g window-status-style "fg=#5c6370,bg=#282c34"
set-window-option -g window-status-format " #I:#W#F "

# Separator between windows
set-window-option -g window-status-separator "#[fg=#5c6370] â€¢ "

# Style for windows with activity (bell, content alert)
set-window-option -g window-status-activity-style "fg=#e5c07b,bg=#282c34,bold" # Yellow text

# General tmux settings

# Default shell
set-option -g default-shell /bin/zsh
set -g default-command "zsh"

# Extended keys for applications like Neovim

# Visual activity (we turn it off, can be distracting)
set -g visual-activity off

# Set the default paste mode to use system clipboard
set-option -g set-clipboard external

# Pane indexing starts at 1
setw -g pane-base-index 1

# Window indexing starts at 1
set -g base-index 1
set -g renumber-windows on # Renumber windows when one is closed

# Window renaming
set-option -g allow-rename on
set-window-option -g automatic-rename on
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}' # Name window after current path

# Default delay for escape sequences (0 for faster Vim responsiveness)
set -s escape-time 0

# Enable focus events for applications like Neovim
set-option -g focus-events on

# Message line style
set -g message-style 'bold'

# Bells / Notifications (silence them)
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none
setw -g window-status-bell-style 'bold'

# History limit
set -g history-limit 10000

# Aggressive resize (resize panes to fill available space)
setw -g aggressive-resize on


# Initial key unbinds to free them up for custom bindings

unbind C-b
unbind C-h
unbind C-l
unbind c
unbind &

# Unbind default split keys, we'll rebind them
unbind '"'
unbind %


# Set prefix to C-e
set -g prefix C-e
bind C-e send-prefix

# Alternative prefix (C-g), uncomment if desired
# set -g prefix C-g
# bind C-g send-prefix


bind m copy-mode

# Vi mode for copy mode
setw -g mode-keys vi
set -g mode-style "fg=white,bg=#5c6370" # Style for copy mode highlighting

# Copy mode bindings (vi-style)
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle # Ctrl+v for block selection

# Copy and cancel (using pbcopy for macOS, replace with xclip/wl-copy for Linux if needed)
# Assumes pbcopy is available (macOS). For Linux:
#   X11: "xclip -selection clipboard -i"
#   Wayland: "wl-copy"
# You might want to create a helper script to detect and use the correct one.
COPY_COMMAND="xclip -selection clipboard -i" # Change this based on your OS

bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"
bind -T copy-mode-vi x send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"
bind -T copy-mode-vi C-c send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"
bind -T copy-mode-vi Space send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"
bind -T copy-mode-vi M-c send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"

# Copy on mouse drag end in copy mode
# bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "$COPY_COMMAND"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X stop-selection

# Paste buffer
bind P paste-buffer # Prefix + P


# Scrolling in copy mode
bind -T copy-mode-vi u send-keys -X halfpage-up
bind -T copy-mode-vi d send-keys -X halfpage-down
unbind -T copy-mode-vi C-u # Unbind default if any clash
unbind -T copy-mode-vi C-d # Unbind default if any clash


# Pane navigation, creation, killing

# Kill pane
bind q kill-pane        # Prefix + q
bind -n M-w kill-pane   # Alt+w (no prefix)
bind -n M-delete kill-pane # Alt+Delete (no prefix)

# Pane Navigation (using prefix)
bind h select-pane -L
bind l select-pane -R
bind k select-pane -U
bind j select-pane -D

# Pane Navigation (Alt + hjkl) - commented out from original as you had copy-mode specific ones
# Consider using tmux-smart-pane-selection plugin or similar for vim integration if needed
# bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
# ... and so on for M-j, M-k, M-l

# Pane navigation while in copy-mode (allows navigating out of copy mode to another pane)
bind-key -T copy-mode-vi 'M-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'M-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'M-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'M-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# Split window (vertical)
bind S splitw -v -c '#{pane_current_path}' # Prefix + S
bind - splitw -v -c '#{pane_current_path}' # Prefix + -
bind -n M-\- splitw -v -c '#{pane_current_path}' # Alt + - (no prefix)


# Split window (horizontal)
bind V splitw -h -c '#{pane_current_path}' # Prefix + V
bind \\ splitw -h -c '#{pane_current_path}' # Prefix + \
bind -n M-\' splitw -h -c '#{pane_current_path}' # Alt + ' (no prefix)


# Window navigation, creation, renaming

# New window
bind enter new-window -c "#{pane_current_path}" -a # Prefix + Enter, new window after current
bind -n M-enter new-window -c "#{pane_current_path}" -a # Alt + Enter, new window after current (no prefix)

# Rename window
bind r command-prompt -p "Rename window to: " "rename-window '%%'"

# Select previous window
bind -r , select-window -t :-  # Prefix + , (repeatable)
bind -r -n M-, select-window -t :- # Alt + , (no prefix, repeatable)
bind -r -n C-, select-window -t :- # Ctrl + , (no prefix, repeatable)

# Select next window
bind -r . select-window -t :+  # Prefix + . (repeatable)
bind -r -n M-. select-window -t :+ # Alt + . (no prefix, repeatable)
bind -r -n C-. select-window -t :+ # Ctrl + . (no prefix, repeatable)

# Rotate window positions
bind -r o rotate-window -D # Prefix + o (repeatable)

# Reorder/swap window positions
bind-key -n M-left swap-window -t -1 \; select-window -t -1 # Alt + n (no prefix)
bind-key -n M-right swap-window -t +1 \; select-window -t +1 # Alt + p (no prefix)

set -g mouse on
